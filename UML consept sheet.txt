//these are comments
/*
they will be used to take you through the big ideas
i will migrate the original doc to here soon
*/

//functions
  function name(parameters)[type /*optional*/ ]{
    code
  }

//variables
  var name = value //dynamic
  int name = whole number //type safe
  float name = decimal //type safe
  double name = precise decimal //type safe
  string name = "string" //type safe, use only "" for strings
  bool name = Boolean //type safe
  enum name = {posibleValue1, posibleValue2, ect}
  nameOfAnEnum name = value //use this to make a variable with a type dictated by an enum

//data types
  hash name = key: value: //type safe, only one key value pair
  table name = [value, value, ect] //type safe
  infar name = (starting value, change1, change2, change3, ect)
  RGB name = [red, gree, blue]
  CMYK name = [cyan, magenta, yellow, black]
  RYB name = [red, yellow, blue]
  HSL name = [hue, saturation, lightness]
  HSV name = [hue, saturation, value]
  HEX name = #hex value //such as #FF0000

//senders and receivers
  //sender
    beacon {
      globalSignal("message") //or
      localSignal("message")
    }
  //receiver
    receiver ("message"){
      code //no return
    }

//class
  class name = (class = name /*if no inheritance input "void"*/ ){
    
  }

//object
  name = (class = name /*if no inheritance input "void"*/ ){
    
  }

//proportys
  type name: value //just replace "=" with ":", use with classes and objects

//methods
  method name(parameters)[type /*optional*/ ]{

  } //just replace "function" with "method"

//front end
  //there are two kinds of elements, parent elements and base elements
  //parent element syntax is <item(parameters)>{child elements}
  //base element syntax is <item(parameters)>
  //all colors are one of the following - RGB, CMYK, RYB, HSL, HSV, or HEX. to add color into the paramaters, use the color type followed by the values. ex- RGB[255,255,255] ex- CMYK[255,255,255,255]. or use a variable of one of the color types

  //for desktop
    <window(name, hight, width, fullscreen /*bool*/ )>{

    }
    <text(id, text, x, y, size /*in pixels*/ )>
    <square(id, x, y, hight, width, color)>
    <box(id, x, y, hight, width, color)>{

    }
    <circle(id, x, y, hight, width, color)>
    <shape(id, color, point1x, point1y, point2x, point2y, ect...)>
    <geomitry(id, color, point1x, point1y, point2x, point2y, ect...)>{

    }
    <image(id, x, y, hight, width, imageFilePath)>

  //web spesific
    //web apps must compile to html, so the elements will be similar to that of html elements
    